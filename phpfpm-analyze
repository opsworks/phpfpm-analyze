#!/usr/bin/python

import os, sys, re, csv, locale
from datetime import datetime
from argparse import ArgumentParser

#import locale
#locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')

arg_parser = ArgumentParser(description = "Analyze PHP-FPM log file")

arg_parser.add_argument("-d", dest="debug", action = "store_true", default = False, help = "Enable debugging")
arg_parser.add_argument("-s", dest="start_date", default = None, help = "Start date to look for in the log (2015/07/20 11:40:19)")
arg_parser.add_argument("-e", dest="end_date", default = None, help = "End date to look for in the log")
arg_parser.add_argument("-o", dest="output", default = None, help = "output file name")
arg_parser.add_argument("-m", dest="min_count", default = 0, type=int, help = "minimum number of slow occurance to count for (0 means disabled)")
arg_parser.add_argument("slow_log", nargs="*", help = "PHP-FPM slow log file")

args = arg_parser.parse_args()

cur_function_stream = ''
result_map = {}
start_date = None
end_date = None

if args.start_date :
    start_date = datetime.strptime(args.start_date, "%Y/%m/%d %H:%M:%S")
if args.end_date :
    end_date = datetime.strptime(args.end_date, "%Y/%m/%d %H:%M:%S")

skip = False
if not args.slow_log :
    slow_log = sys.stdin
else :
    slow_log = open(args.slow_log[0], "r")

while True :
    line = slow_log.readline()
    if not line: break
    line = line.strip()

    if not line :
        if not cur_function_stream :
            continue
        if skip :
            cur_function_stream = ''
            skip = False
            continue
        # empty line, means flush
        try :
            result_map[cur_function_stream][1] += 1
        except KeyError :
            result_map[cur_function_stream] = [cur_function_stream, 1]
        cur_function_stream = ''
    elif line[0] == '[' :
        if line[1:3] == "0x" :
            # hex code
            #print "Hex: ", line
            hex_location, function = line.split(None, 1)
            cur_function_stream += function + '\n'
        else :
            # date
            #print "Date: ", line
            # XXX: not for now
            index = line.find(']')
            date_str = line[1:index]
            log_time = datetime.strptime(date_str, "%d-%b-%Y %H:%M:%S")
            if start_date and (log_time < start_date) :
                #print 'Skipping due to ', start_date, log_time, date_str
                skip = True
            if end_date and (log_time > end_date) :
                #print 'Skipping due to ', end_date, log_time, date_str
                skip = True

    elif line.startswith('script_filename = ') :
        script_filename = line.split()[2]
    else :
        print 'What the fuck is this line?: ', line
if cur_function_stream and not skip :
    try :
        result_map[cur_function_stream][1] += 1
    except KeyError :
        result_map[cur_function_stream] = [cur_function_stream, 1]

if slow_log != sys.stdin :
    slow_log.close()

result_sorted = sorted(result_map.itervalues(), lambda a,b: cmp(a[1], b[1]), None, True)

if not args.output or args.output == '-' :
    output = sys.stdout
else :
    output = open(args.output, "wb")

writer = csv.writer(output)

writer.writerow(('traceback', 'count'))
for item in result_sorted :
    if args.min_count > 0 :
        if item[1] <= args.min_count: break
    writer.writerow(item)

if output != sys.stdout :
    output.close()
